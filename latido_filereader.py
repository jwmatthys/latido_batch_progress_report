from xml.etree import ElementTree
from sys import argv
from pyDes import *
from Tkinter import *
import ttk
import tkFileDialog, tkMessageBox
import os
import time
import getpass

class HandleXML:

    def __init__(self):
        self.username = ""
        self.score = 0
        self.lastcompleted = ""
        self.lastcompletedtime = ""
        self.laststartedtime = ""
        self.exercises = []

    def parse(self, filepath, key):

        try:
            k = des(key, padmode=PAD_PKCS5)
        except ValueError, e:
            tkMessageBox.showerror("Latido Filereader", e)
            return
        file = open(filepath, 'rb')
        data = file.read()
        try:
            root = ElementTree.fromstring(k.decrypt(data))
        except:
            tkMessageBox.showerror("Latido Filereader", "Cannot decrypt \""+filepath+"\"\nIs it a valid Latido file?\nIs the library key correct?")
            file.close
            return
        file.close
        self.exercises = []
        for node in root:
            if "name" == node.tag:
                self.username = node.text
            elif "score" == node.tag:
                self.score = int (node.text)
            elif "progress" == node.tag:
                for exercise in node:
                    self.exercises.append([exercise.get('id'), exercise.get('started'), exercise.get('completed'), int (exercise.text)])
                    if exercise.get('completed'):
                        self.lastcompleted = exercise.get('id')
                        self.lastcompletedtime = exercise.get('completed')
                        self.laststartedtime = exercise.get('started')

    def getUsername(self):
        return self.username

    def getScore(self):
        return self.score

    def getLastCompleted(self):
        return self.lastcompleted

    def getStartTime(self):
        return self.laststartedtime

    def getCompletedTime(self):
        return self.lastcompletedtime

    def getExercises(self):
        return self.exercises


class LatidoFilereader:

    def processXML (self, filepath, filename):
        self.xml.parse(filepath, self.keyval.get())
        self.loaded = True
        username = self.xml.getUsername()
        score = self.xml.getScore()
        lastcompleted = self.xml.getLastCompleted()
        datestamp1 = self.xml.getStartTime()
        datestamp2 = self.xml.getCompletedTime()
        exercises = self.xml.getExercises()
        self.data.insert("","end",filename,text=filename,values=(username, lastcompleted, datestamp1, datestamp2, score))
        for ex in exercises:
            self.data.insert(filename, "end", values=("",ex[0],ex[1],ex[2],ex[3]))

    def loadCallback(self):
        for i in self.data.get_children():
            self.data.delete(i)
        latidodir = tkFileDialog.askdirectory(mustexist=True,
            title='Select Folder of Latido User Files',
            initialdir = os.path.expanduser('~'))
        if latidodir == '':
            return
        if 0 == self.walk_directories.get():
            for file in os.listdir(latidodir):
                if file.endswith(".latido"):
                    self.processXML (os.path.join(latidodir,file), file)
        else:
            for root, dirs, files in os.walk(latidodir):
                for f in files:
                    if f.endswith(".latido"):
                        self.processXML (os.path.join(root, f), f)

    def format_header (self):
        separator = ", "
        output = "FILENAME" + separator + "USERNAME" + separator + "SCORE" + separator + "LAST EXERCISE" + separator + "DATE COMPLETED"
        return output

    def format_info (self):
        output = "\nReport generated by "+getpass.getuser()+time.strftime("\n%c\n")
        return output

    def format_summary (self, filename, mydict):
        separator = ", "
        output = filename + separator + mydict['username'] + separator + mydict['score'] + separator + mydict['lastcompleted'] + separator + mydict['end']
        return output

    def saveCallback(self):
        if self.loaded:
            savepath = tkFileDialog.asksaveasfile(title='Choose Location to Save Progress Report',
                initialdir = os.path.expanduser('~'), defaultextension='.txt')
            if savepath is None:
                return
            savepath.truncate()
            savepath.write(self.format_header())
            savepath.write("\n")
            for child in self.data.get_children():
                filename = self.data.item(child, 'text')
                mydict = self.data.set(child)
                myline = self.format_summary(filename, mydict)
                savepath.write(myline)
                savepath.write("\n")
            savepath.write(self.format_info())
            savepath.close
        else:
            tkMessageBox.showwarning("Latido Filereader", "No Latido files loaded yet!")

    def __init__(self, root):
        self.xml = HandleXML()
        self.root = root
        self.loaded = False
        self.root.option_add('*tearOff', False)
        self.root.resizable(True, True)
        self.root.title ("Latido Progress File Reader")

        self.buttonbar = ttk.Frame(root)
        self.buttonbar.grid(column=0, row=0, columnspan=2, sticky='EW')

        self.loadbutton = ttk.Button(self.buttonbar,
            text = 'Open Folder with Latido Files',
            command = self.loadCallback)
        self.keyval = StringVar()
        self.walk_directories = IntVar()
        self.walk_toggle = ttk.Checkbutton (self.buttonbar, variable = self.walk_directories, onvalue=1, offvalue=0)
        self.walk_directories.set(0)
        self.keyentry = ttk.Entry(self.buttonbar, width=8,
            textvariable = self.keyval)
        self.keyval.set("eyesears")
        self.savebutton = ttk.Button(self.buttonbar,
            text = 'Save Progress Report',
            command = self.saveCallback)

        ttk.Label(self.buttonbar, text="Module Key (8 chars):").grid(column = 2, row = 0, sticky=W, padx=5, pady=5)
        self.loadbutton.grid (column = 0, row = 0, columnspan=2, sticky=W, padx=5, pady=5)
        self.keyentry.grid (column = 3, row = 0, sticky=W, padx=5, pady=5)
        self.savebutton.grid (column = 4, row = 0, sticky=E, padx=5, pady=5)
        self.walk_toggle.grid (column = 1, row =1, sticky=W, padx=5, pady=5)
        ttk.Label(self.buttonbar, text="Also include subdirectories?").grid(column = 0, row = 1, sticky=W, padx=5, pady=5)

        self.buttonbar.grid_columnconfigure(0,weight=0)
        self.buttonbar.grid_columnconfigure(1,weight=0)
        self.buttonbar.grid_columnconfigure(2,weight=0)
        self.buttonbar.grid_columnconfigure(3,weight=1)
        self.buttonbar.grid_columnconfigure(4,weight=0)


        self.data = ttk.Treeview(root)
        self.data.grid(column=0,row=1, columnspan=4, sticky='NSEW')
        S = ttk.Scrollbar(root)
        S.grid(column=1,row=1,sticky='NS')
        S.config(command=self.data.yview)
        self.data.config(yscrollcommand=S.set)
        self.data["columns"]=("username", "lastcompleted", "begin", "end", "score")
        self.data.column("username",width=15)
        self.data.column("lastcompleted",width=10)
        self.data.column("begin",width=20)
        self.data.column("end",width=20)
        self.data.column("score",width=5)
        self.data.heading("username",text="Username")
        self.data.heading("lastcompleted",text="Last Exercise")
        self.data.heading("begin",text="Start Time")
        self.data.heading("end",text="Finish Time")
        self.data.heading("score",text="Score")

        root.grid_rowconfigure(0,weight=0)
        root.grid_rowconfigure(1,weight=1)
        root.grid_columnconfigure(0,weight=1)
        root.grid_columnconfigure(1,weight=0)

        if sys.platform == 'darwin':
            root.bind('<Command-o>', lambda e: self.loadCallback())
            root.bind('<Command-s>', lambda e: self.saveCallback())
        else:
            root.bind('<Control-o>', lambda e: self.loadCallback())
            root.bind('<Control-s>', lambda e: self.saveCallback())


def main():
    root = Tk()
    root.geometry("1024x400+100+100")
    gui = LatidoFilereader (root)
    root.mainloop()

if __name__ == "__main__": main()
